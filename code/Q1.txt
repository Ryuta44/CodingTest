format_log
概要:監視ログファイルを参照しやすい形に編集する関数
引数:対象ファイルの相対パス(str)
返り値:{サーバアドレス(str):[確認日時(datetime),応答時間(str)]}
仕様:ログをサーバアドレスをキーとした辞書型で返す。全ての課題で利用できるような形で返すように設計した。

output_failure
概要:故障したサーバのアドレスと故障期間を返す関数
引数:対象のログ({サーバアドレス(str):[確認日時(datetime),応答時間(str)]}), タイムアウトの回数制限(int)
- タイムアウトの回数制限:連続したタイムアウトの回数がこの回数を超えるとそのサーバは故障したと判断する。この引数を与えない場合は1とする。
返り値:{type:'failure'(str), address:サーバアドレス(str), start_time:故障開始時刻(datetime), end_time:故障終了時刻(datetime)}
- type:'failure' = 故障
- end_time:対象ログ内で故障が治らなかたらNoneを代入する
仕様:故障している期間を一つずつ返す。課題3にでてくる'過負荷状態'のデータも同じように扱いたかったため、typeで故障か過負荷か判断できるようにした。ログの終了時にタイムアウトから復活していないサーバは回数に関係なく、故障とみなす。

main
仕様:サーバを監視するというシステムなので、基本的にはサーバ単位でデータを扱うようにした。また拡張することも考え、データは扱いやすく、汎用性があるように設計した。